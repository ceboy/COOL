// MESH: same as compute script

string geoname = "geo3";
int Nmesh = 4;
real[int] Tmesh(Nmesh); 
//Tmesh(0) = 1;
for(int i=0; i<Nmesh; i++) Tmesh(i) = i+1;

string gpname = "hconvux.gp";
ofstream gpout(gpname);

int wait4plot = 1;

verbosity = 2;

// ** REFERENCE MESH

mesh Thref = readmesh("./Mesh/"+geoname+"mesh"+Nmesh+".msh");

fespace Uhref(Thref,P1);

Uhref uref,ucomp,udiff;

ifstream ufileref("./Result/"+geoname+"mesh"+Nmesh+"/ux.txt");

ufileref >> uref[];

//uref = sin(x+y);

// ** CURRENT (UNREFINED NESTED) MESH

real[int] eL2(Nmesh-1);
real[int] eH1(Nmesh-1);

mesh Th;

for (int mymesh = 1; mymesh < Nmesh; mymesh++)
{
  
  Th = readmesh("./Mesh/"+geoname+"mesh"+mymesh+".msh");

  fespace Uh(Th,P1);

  Uh u;

  ifstream ufile("./Result/"+geoname+"mesh"+mymesh+"/ux.txt");

  ufile >> u[];

  plot(Th,u,fill=1,value=true,wait=wait4plot,cmm="FEsol");
    
  ucomp = u;
  
  udiff = uref-u;
  
  eL2(mymesh-1) = sqrt( int2d(Thref)(square(udiff)) );
  
  eH1(mymesh-1) = sqrt( int2d(Thref)(square(dx(udiff))+square(dy(udiff))) );
  
  gpout << 1./(10*mymesh) << "  "  << eL2(mymesh-1) << "  "  << eH1(mymesh-1) << endl;
  
  real[int] utab(Uh.ndof);
  real[int] utabref(Uhref.ndof);
  utab(0:Uh.ndof-1)=u[];
  utabref(0:Uhref.ndof-1)=uref[];
  real erreur;
  real norme=uref[].linfty;
  erreur=(udiff[].linfty)/norme;
  cout<<"erreur : "<<erreur<<endl;

}
/*
exec("echo 'plot \""+gpname+"\" using 1:2 w l\
pause 2 \
set term postscript enhanced color \
set output \"hconvL2.eps\" \
replot \
' | gnuplot");
exec("echo 'plot \""+gpname+"\" using 1:3 with lines\
pause 2 \
set term postscript \
set output \"hconvH1.eps\" \
replot \
quit \
' | gnuplot");
*/
// set yrange [0:2.1]
// set style line 1 lt 1 lw 1
// set style line 2 lt 2 lw 3
// set style line 3 lt 6 lw 1
// set term x11
